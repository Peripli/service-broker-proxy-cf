// Code generated by counterfeiter. DO NOT EDIT.
package cffakes

import (
	io "io"
	http "net/http"
	url "net/url"
	sync "sync"

	cf "github.com/Peripli/service-broker-proxy-cf/cf"
	cfclient "github.com/cloudfoundry-community/go-cfclient"
)

type FakeCCPlatformClient struct {
	CreateServiceBrokerStub        func(cfclient.CreateServiceBrokerRequest) (cfclient.ServiceBroker, error)
	createServiceBrokerMutex       sync.RWMutex
	createServiceBrokerArgsForCall []struct {
		arg1 cfclient.CreateServiceBrokerRequest
	}
	createServiceBrokerReturns struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	createServiceBrokerReturnsOnCall map[int]struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	CreateServicePlanVisibilityStub        func(string, string) (cfclient.ServicePlanVisibility, error)
	createServicePlanVisibilityMutex       sync.RWMutex
	createServicePlanVisibilityArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createServicePlanVisibilityReturns struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	createServicePlanVisibilityReturnsOnCall map[int]struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	DeleteServiceBrokerStub        func(string) error
	deleteServiceBrokerMutex       sync.RWMutex
	deleteServiceBrokerArgsForCall []struct {
		arg1 string
	}
	deleteServiceBrokerReturns struct {
		result1 error
	}
	deleteServiceBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServicePlanVisibilityStub        func(string, bool) error
	deleteServicePlanVisibilityMutex       sync.RWMutex
	deleteServicePlanVisibilityArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	deleteServicePlanVisibilityReturns struct {
		result1 error
	}
	deleteServicePlanVisibilityReturnsOnCall map[int]struct {
		result1 error
	}
	DoRequestStub        func(*cfclient.Request) (*http.Response, error)
	doRequestMutex       sync.RWMutex
	doRequestArgsForCall []struct {
		arg1 *cfclient.Request
	}
	doRequestReturns struct {
		result1 *http.Response
		result2 error
	}
	doRequestReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	ListServiceBrokersStub        func() ([]cfclient.ServiceBroker, error)
	listServiceBrokersMutex       sync.RWMutex
	listServiceBrokersArgsForCall []struct {
	}
	listServiceBrokersReturns struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	listServiceBrokersReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	ListServicePlanVisibilitiesByQueryStub        func(url.Values) ([]cfclient.ServicePlanVisibility, error)
	listServicePlanVisibilitiesByQueryMutex       sync.RWMutex
	listServicePlanVisibilitiesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicePlanVisibilitiesByQueryReturns struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	listServicePlanVisibilitiesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	ListServicePlansByQueryStub        func(url.Values) ([]cfclient.ServicePlan, error)
	listServicePlansByQueryMutex       sync.RWMutex
	listServicePlansByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicePlansByQueryReturns struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	listServicePlansByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	NewRequestWithBodyStub        func(string, string, io.Reader) *cfclient.Request
	newRequestWithBodyMutex       sync.RWMutex
	newRequestWithBodyArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 io.Reader
	}
	newRequestWithBodyReturns struct {
		result1 *cfclient.Request
	}
	newRequestWithBodyReturnsOnCall map[int]struct {
		result1 *cfclient.Request
	}
	UpdateServiceBrokerStub        func(string, cfclient.UpdateServiceBrokerRequest) (cfclient.ServiceBroker, error)
	updateServiceBrokerMutex       sync.RWMutex
	updateServiceBrokerArgsForCall []struct {
		arg1 string
		arg2 cfclient.UpdateServiceBrokerRequest
	}
	updateServiceBrokerReturns struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	updateServiceBrokerReturnsOnCall map[int]struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCCPlatformClient) CreateServiceBroker(arg1 cfclient.CreateServiceBrokerRequest) (cfclient.ServiceBroker, error) {
	fake.createServiceBrokerMutex.Lock()
	ret, specificReturn := fake.createServiceBrokerReturnsOnCall[len(fake.createServiceBrokerArgsForCall)]
	fake.createServiceBrokerArgsForCall = append(fake.createServiceBrokerArgsForCall, struct {
		arg1 cfclient.CreateServiceBrokerRequest
	}{arg1})
	fake.recordInvocation("CreateServiceBroker", []interface{}{arg1})
	fake.createServiceBrokerMutex.Unlock()
	if fake.CreateServiceBrokerStub != nil {
		return fake.CreateServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCCPlatformClient) CreateServiceBrokerCallCount() int {
	fake.createServiceBrokerMutex.RLock()
	defer fake.createServiceBrokerMutex.RUnlock()
	return len(fake.createServiceBrokerArgsForCall)
}

func (fake *FakeCCPlatformClient) CreateServiceBrokerCalls(stub func(cfclient.CreateServiceBrokerRequest) (cfclient.ServiceBroker, error)) {
	fake.createServiceBrokerMutex.Lock()
	defer fake.createServiceBrokerMutex.Unlock()
	fake.CreateServiceBrokerStub = stub
}

func (fake *FakeCCPlatformClient) CreateServiceBrokerArgsForCall(i int) cfclient.CreateServiceBrokerRequest {
	fake.createServiceBrokerMutex.RLock()
	defer fake.createServiceBrokerMutex.RUnlock()
	argsForCall := fake.createServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCCPlatformClient) CreateServiceBrokerReturns(result1 cfclient.ServiceBroker, result2 error) {
	fake.createServiceBrokerMutex.Lock()
	defer fake.createServiceBrokerMutex.Unlock()
	fake.CreateServiceBrokerStub = nil
	fake.createServiceBrokerReturns = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) CreateServiceBrokerReturnsOnCall(i int, result1 cfclient.ServiceBroker, result2 error) {
	fake.createServiceBrokerMutex.Lock()
	defer fake.createServiceBrokerMutex.Unlock()
	fake.CreateServiceBrokerStub = nil
	if fake.createServiceBrokerReturnsOnCall == nil {
		fake.createServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceBroker
			result2 error
		})
	}
	fake.createServiceBrokerReturnsOnCall[i] = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) CreateServicePlanVisibility(arg1 string, arg2 string) (cfclient.ServicePlanVisibility, error) {
	fake.createServicePlanVisibilityMutex.Lock()
	ret, specificReturn := fake.createServicePlanVisibilityReturnsOnCall[len(fake.createServicePlanVisibilityArgsForCall)]
	fake.createServicePlanVisibilityArgsForCall = append(fake.createServicePlanVisibilityArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateServicePlanVisibility", []interface{}{arg1, arg2})
	fake.createServicePlanVisibilityMutex.Unlock()
	if fake.CreateServicePlanVisibilityStub != nil {
		return fake.CreateServicePlanVisibilityStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServicePlanVisibilityReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCCPlatformClient) CreateServicePlanVisibilityCallCount() int {
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	return len(fake.createServicePlanVisibilityArgsForCall)
}

func (fake *FakeCCPlatformClient) CreateServicePlanVisibilityCalls(stub func(string, string) (cfclient.ServicePlanVisibility, error)) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = stub
}

func (fake *FakeCCPlatformClient) CreateServicePlanVisibilityArgsForCall(i int) (string, string) {
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	argsForCall := fake.createServicePlanVisibilityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCCPlatformClient) CreateServicePlanVisibilityReturns(result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = nil
	fake.createServicePlanVisibilityReturns = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) CreateServicePlanVisibilityReturnsOnCall(i int, result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = nil
	if fake.createServicePlanVisibilityReturnsOnCall == nil {
		fake.createServicePlanVisibilityReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.createServicePlanVisibilityReturnsOnCall[i] = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) DeleteServiceBroker(arg1 string) error {
	fake.deleteServiceBrokerMutex.Lock()
	ret, specificReturn := fake.deleteServiceBrokerReturnsOnCall[len(fake.deleteServiceBrokerArgsForCall)]
	fake.deleteServiceBrokerArgsForCall = append(fake.deleteServiceBrokerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteServiceBroker", []interface{}{arg1})
	fake.deleteServiceBrokerMutex.Unlock()
	if fake.DeleteServiceBrokerStub != nil {
		return fake.DeleteServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServiceBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeCCPlatformClient) DeleteServiceBrokerCallCount() int {
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	return len(fake.deleteServiceBrokerArgsForCall)
}

func (fake *FakeCCPlatformClient) DeleteServiceBrokerCalls(stub func(string) error) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = stub
}

func (fake *FakeCCPlatformClient) DeleteServiceBrokerArgsForCall(i int) string {
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	argsForCall := fake.deleteServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCCPlatformClient) DeleteServiceBrokerReturns(result1 error) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = nil
	fake.deleteServiceBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCCPlatformClient) DeleteServiceBrokerReturnsOnCall(i int, result1 error) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = nil
	if fake.deleteServiceBrokerReturnsOnCall == nil {
		fake.deleteServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCCPlatformClient) DeleteServicePlanVisibility(arg1 string, arg2 bool) error {
	fake.deleteServicePlanVisibilityMutex.Lock()
	ret, specificReturn := fake.deleteServicePlanVisibilityReturnsOnCall[len(fake.deleteServicePlanVisibilityArgsForCall)]
	fake.deleteServicePlanVisibilityArgsForCall = append(fake.deleteServicePlanVisibilityArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("DeleteServicePlanVisibility", []interface{}{arg1, arg2})
	fake.deleteServicePlanVisibilityMutex.Unlock()
	if fake.DeleteServicePlanVisibilityStub != nil {
		return fake.DeleteServicePlanVisibilityStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServicePlanVisibilityReturns
	return fakeReturns.result1
}

func (fake *FakeCCPlatformClient) DeleteServicePlanVisibilityCallCount() int {
	fake.deleteServicePlanVisibilityMutex.RLock()
	defer fake.deleteServicePlanVisibilityMutex.RUnlock()
	return len(fake.deleteServicePlanVisibilityArgsForCall)
}

func (fake *FakeCCPlatformClient) DeleteServicePlanVisibilityCalls(stub func(string, bool) error) {
	fake.deleteServicePlanVisibilityMutex.Lock()
	defer fake.deleteServicePlanVisibilityMutex.Unlock()
	fake.DeleteServicePlanVisibilityStub = stub
}

func (fake *FakeCCPlatformClient) DeleteServicePlanVisibilityArgsForCall(i int) (string, bool) {
	fake.deleteServicePlanVisibilityMutex.RLock()
	defer fake.deleteServicePlanVisibilityMutex.RUnlock()
	argsForCall := fake.deleteServicePlanVisibilityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCCPlatformClient) DeleteServicePlanVisibilityReturns(result1 error) {
	fake.deleteServicePlanVisibilityMutex.Lock()
	defer fake.deleteServicePlanVisibilityMutex.Unlock()
	fake.DeleteServicePlanVisibilityStub = nil
	fake.deleteServicePlanVisibilityReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCCPlatformClient) DeleteServicePlanVisibilityReturnsOnCall(i int, result1 error) {
	fake.deleteServicePlanVisibilityMutex.Lock()
	defer fake.deleteServicePlanVisibilityMutex.Unlock()
	fake.DeleteServicePlanVisibilityStub = nil
	if fake.deleteServicePlanVisibilityReturnsOnCall == nil {
		fake.deleteServicePlanVisibilityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServicePlanVisibilityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCCPlatformClient) DoRequest(arg1 *cfclient.Request) (*http.Response, error) {
	fake.doRequestMutex.Lock()
	ret, specificReturn := fake.doRequestReturnsOnCall[len(fake.doRequestArgsForCall)]
	fake.doRequestArgsForCall = append(fake.doRequestArgsForCall, struct {
		arg1 *cfclient.Request
	}{arg1})
	fake.recordInvocation("DoRequest", []interface{}{arg1})
	fake.doRequestMutex.Unlock()
	if fake.DoRequestStub != nil {
		return fake.DoRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.doRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCCPlatformClient) DoRequestCallCount() int {
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	return len(fake.doRequestArgsForCall)
}

func (fake *FakeCCPlatformClient) DoRequestCalls(stub func(*cfclient.Request) (*http.Response, error)) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = stub
}

func (fake *FakeCCPlatformClient) DoRequestArgsForCall(i int) *cfclient.Request {
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	argsForCall := fake.doRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCCPlatformClient) DoRequestReturns(result1 *http.Response, result2 error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = nil
	fake.doRequestReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) DoRequestReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = nil
	if fake.doRequestReturnsOnCall == nil {
		fake.doRequestReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.doRequestReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) ListServiceBrokers() ([]cfclient.ServiceBroker, error) {
	fake.listServiceBrokersMutex.Lock()
	ret, specificReturn := fake.listServiceBrokersReturnsOnCall[len(fake.listServiceBrokersArgsForCall)]
	fake.listServiceBrokersArgsForCall = append(fake.listServiceBrokersArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServiceBrokers", []interface{}{})
	fake.listServiceBrokersMutex.Unlock()
	if fake.ListServiceBrokersStub != nil {
		return fake.ListServiceBrokersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceBrokersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCCPlatformClient) ListServiceBrokersCallCount() int {
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	return len(fake.listServiceBrokersArgsForCall)
}

func (fake *FakeCCPlatformClient) ListServiceBrokersCalls(stub func() ([]cfclient.ServiceBroker, error)) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = stub
}

func (fake *FakeCCPlatformClient) ListServiceBrokersReturns(result1 []cfclient.ServiceBroker, result2 error) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = nil
	fake.listServiceBrokersReturns = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) ListServiceBrokersReturnsOnCall(i int, result1 []cfclient.ServiceBroker, result2 error) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = nil
	if fake.listServiceBrokersReturnsOnCall == nil {
		fake.listServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBroker
			result2 error
		})
	}
	fake.listServiceBrokersReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) ListServicePlanVisibilitiesByQuery(arg1 url.Values) ([]cfclient.ServicePlanVisibility, error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	ret, specificReturn := fake.listServicePlanVisibilitiesByQueryReturnsOnCall[len(fake.listServicePlanVisibilitiesByQueryArgsForCall)]
	fake.listServicePlanVisibilitiesByQueryArgsForCall = append(fake.listServicePlanVisibilitiesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServicePlanVisibilitiesByQuery", []interface{}{arg1})
	fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	if fake.ListServicePlanVisibilitiesByQueryStub != nil {
		return fake.ListServicePlanVisibilitiesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicePlanVisibilitiesByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCCPlatformClient) ListServicePlanVisibilitiesByQueryCallCount() int {
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	return len(fake.listServicePlanVisibilitiesByQueryArgsForCall)
}

func (fake *FakeCCPlatformClient) ListServicePlanVisibilitiesByQueryCalls(stub func(url.Values) ([]cfclient.ServicePlanVisibility, error)) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = stub
}

func (fake *FakeCCPlatformClient) ListServicePlanVisibilitiesByQueryArgsForCall(i int) url.Values {
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	argsForCall := fake.listServicePlanVisibilitiesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCCPlatformClient) ListServicePlanVisibilitiesByQueryReturns(result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = nil
	fake.listServicePlanVisibilitiesByQueryReturns = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) ListServicePlanVisibilitiesByQueryReturnsOnCall(i int, result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = nil
	if fake.listServicePlanVisibilitiesByQueryReturnsOnCall == nil {
		fake.listServicePlanVisibilitiesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.listServicePlanVisibilitiesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) ListServicePlansByQuery(arg1 url.Values) ([]cfclient.ServicePlan, error) {
	fake.listServicePlansByQueryMutex.Lock()
	ret, specificReturn := fake.listServicePlansByQueryReturnsOnCall[len(fake.listServicePlansByQueryArgsForCall)]
	fake.listServicePlansByQueryArgsForCall = append(fake.listServicePlansByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServicePlansByQuery", []interface{}{arg1})
	fake.listServicePlansByQueryMutex.Unlock()
	if fake.ListServicePlansByQueryStub != nil {
		return fake.ListServicePlansByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicePlansByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCCPlatformClient) ListServicePlansByQueryCallCount() int {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	return len(fake.listServicePlansByQueryArgsForCall)
}

func (fake *FakeCCPlatformClient) ListServicePlansByQueryCalls(stub func(url.Values) ([]cfclient.ServicePlan, error)) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = stub
}

func (fake *FakeCCPlatformClient) ListServicePlansByQueryArgsForCall(i int) url.Values {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	argsForCall := fake.listServicePlansByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCCPlatformClient) ListServicePlansByQueryReturns(result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	fake.listServicePlansByQueryReturns = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) ListServicePlansByQueryReturnsOnCall(i int, result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	if fake.listServicePlansByQueryReturnsOnCall == nil {
		fake.listServicePlansByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) NewRequestWithBody(arg1 string, arg2 string, arg3 io.Reader) *cfclient.Request {
	fake.newRequestWithBodyMutex.Lock()
	ret, specificReturn := fake.newRequestWithBodyReturnsOnCall[len(fake.newRequestWithBodyArgsForCall)]
	fake.newRequestWithBodyArgsForCall = append(fake.newRequestWithBodyArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 io.Reader
	}{arg1, arg2, arg3})
	fake.recordInvocation("NewRequestWithBody", []interface{}{arg1, arg2, arg3})
	fake.newRequestWithBodyMutex.Unlock()
	if fake.NewRequestWithBodyStub != nil {
		return fake.NewRequestWithBodyStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newRequestWithBodyReturns
	return fakeReturns.result1
}

func (fake *FakeCCPlatformClient) NewRequestWithBodyCallCount() int {
	fake.newRequestWithBodyMutex.RLock()
	defer fake.newRequestWithBodyMutex.RUnlock()
	return len(fake.newRequestWithBodyArgsForCall)
}

func (fake *FakeCCPlatformClient) NewRequestWithBodyCalls(stub func(string, string, io.Reader) *cfclient.Request) {
	fake.newRequestWithBodyMutex.Lock()
	defer fake.newRequestWithBodyMutex.Unlock()
	fake.NewRequestWithBodyStub = stub
}

func (fake *FakeCCPlatformClient) NewRequestWithBodyArgsForCall(i int) (string, string, io.Reader) {
	fake.newRequestWithBodyMutex.RLock()
	defer fake.newRequestWithBodyMutex.RUnlock()
	argsForCall := fake.newRequestWithBodyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCCPlatformClient) NewRequestWithBodyReturns(result1 *cfclient.Request) {
	fake.newRequestWithBodyMutex.Lock()
	defer fake.newRequestWithBodyMutex.Unlock()
	fake.NewRequestWithBodyStub = nil
	fake.newRequestWithBodyReturns = struct {
		result1 *cfclient.Request
	}{result1}
}

func (fake *FakeCCPlatformClient) NewRequestWithBodyReturnsOnCall(i int, result1 *cfclient.Request) {
	fake.newRequestWithBodyMutex.Lock()
	defer fake.newRequestWithBodyMutex.Unlock()
	fake.NewRequestWithBodyStub = nil
	if fake.newRequestWithBodyReturnsOnCall == nil {
		fake.newRequestWithBodyReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Request
		})
	}
	fake.newRequestWithBodyReturnsOnCall[i] = struct {
		result1 *cfclient.Request
	}{result1}
}

func (fake *FakeCCPlatformClient) UpdateServiceBroker(arg1 string, arg2 cfclient.UpdateServiceBrokerRequest) (cfclient.ServiceBroker, error) {
	fake.updateServiceBrokerMutex.Lock()
	ret, specificReturn := fake.updateServiceBrokerReturnsOnCall[len(fake.updateServiceBrokerArgsForCall)]
	fake.updateServiceBrokerArgsForCall = append(fake.updateServiceBrokerArgsForCall, struct {
		arg1 string
		arg2 cfclient.UpdateServiceBrokerRequest
	}{arg1, arg2})
	fake.recordInvocation("UpdateServiceBroker", []interface{}{arg1, arg2})
	fake.updateServiceBrokerMutex.Unlock()
	if fake.UpdateServiceBrokerStub != nil {
		return fake.UpdateServiceBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCCPlatformClient) UpdateServiceBrokerCallCount() int {
	fake.updateServiceBrokerMutex.RLock()
	defer fake.updateServiceBrokerMutex.RUnlock()
	return len(fake.updateServiceBrokerArgsForCall)
}

func (fake *FakeCCPlatformClient) UpdateServiceBrokerCalls(stub func(string, cfclient.UpdateServiceBrokerRequest) (cfclient.ServiceBroker, error)) {
	fake.updateServiceBrokerMutex.Lock()
	defer fake.updateServiceBrokerMutex.Unlock()
	fake.UpdateServiceBrokerStub = stub
}

func (fake *FakeCCPlatformClient) UpdateServiceBrokerArgsForCall(i int) (string, cfclient.UpdateServiceBrokerRequest) {
	fake.updateServiceBrokerMutex.RLock()
	defer fake.updateServiceBrokerMutex.RUnlock()
	argsForCall := fake.updateServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCCPlatformClient) UpdateServiceBrokerReturns(result1 cfclient.ServiceBroker, result2 error) {
	fake.updateServiceBrokerMutex.Lock()
	defer fake.updateServiceBrokerMutex.Unlock()
	fake.UpdateServiceBrokerStub = nil
	fake.updateServiceBrokerReturns = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) UpdateServiceBrokerReturnsOnCall(i int, result1 cfclient.ServiceBroker, result2 error) {
	fake.updateServiceBrokerMutex.Lock()
	defer fake.updateServiceBrokerMutex.Unlock()
	fake.UpdateServiceBrokerStub = nil
	if fake.updateServiceBrokerReturnsOnCall == nil {
		fake.updateServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceBroker
			result2 error
		})
	}
	fake.updateServiceBrokerReturnsOnCall[i] = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCCPlatformClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createServiceBrokerMutex.RLock()
	defer fake.createServiceBrokerMutex.RUnlock()
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	fake.deleteServicePlanVisibilityMutex.RLock()
	defer fake.deleteServicePlanVisibilityMutex.RUnlock()
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	fake.newRequestWithBodyMutex.RLock()
	defer fake.newRequestWithBodyMutex.RUnlock()
	fake.updateServiceBrokerMutex.RLock()
	defer fake.updateServiceBrokerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCCPlatformClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.CCPlatformClient = new(FakeCCPlatformClient)
